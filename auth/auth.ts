/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 5.28.1
 * source: auth/auth.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "@grpc/grpc-js";
export namespace Auth {
    export class SigninRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            login?: string;
            password?: string;
            service_id?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("login" in data && data.login != undefined) {
                    this.login = data.login;
                }
                if ("password" in data && data.password != undefined) {
                    this.password = data.password;
                }
                if ("service_id" in data && data.service_id != undefined) {
                    this.service_id = data.service_id;
                }
            }
        }
        get login() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set login(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get password() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set password(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get service_id() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set service_id(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            login?: string;
            password?: string;
            service_id?: string;
        }): SigninRequest {
            const message = new SigninRequest({});
            if (data.login != null) {
                message.login = data.login;
            }
            if (data.password != null) {
                message.password = data.password;
            }
            if (data.service_id != null) {
                message.service_id = data.service_id;
            }
            return message;
        }
        toObject() {
            const data: {
                login?: string;
                password?: string;
                service_id?: string;
            } = {};
            if (this.login != null) {
                data.login = this.login;
            }
            if (this.password != null) {
                data.password = this.password;
            }
            if (this.service_id != null) {
                data.service_id = this.service_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.login.length)
                writer.writeString(1, this.login);
            if (this.password.length)
                writer.writeString(2, this.password);
            if (this.service_id.length)
                writer.writeString(3, this.service_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SigninRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SigninRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.login = reader.readString();
                        break;
                    case 2:
                        message.password = reader.readString();
                        break;
                    case 3:
                        message.service_id = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SigninRequest {
            return SigninRequest.deserialize(bytes);
        }
    }
    export class SigninResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            token?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("token" in data && data.token != undefined) {
                    this.token = data.token;
                }
            }
        }
        get token() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set token(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            token?: string;
        }): SigninResponse {
            const message = new SigninResponse({});
            if (data.token != null) {
                message.token = data.token;
            }
            return message;
        }
        toObject() {
            const data: {
                token?: string;
            } = {};
            if (this.token != null) {
                data.token = this.token;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.token.length)
                writer.writeString(1, this.token);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SigninResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SigninResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.token = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SigninResponse {
            return SigninResponse.deserialize(bytes);
        }
    }
    interface GrpcUnaryServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    }
    interface GrpcStreamServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
        (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
    }
    interface GrpWritableServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    }
    interface GrpcChunkServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
        (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
    }
    interface GrpcPromiseServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): Promise<R>;
        (message: P, options?: grpc_1.CallOptions): Promise<R>;
    }
    export abstract class UnimplementedAuthService {
        static definition = {
            Signin: {
                path: "/Auth.Auth/Signin",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: SigninRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => SigninRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: SigninResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => SigninResponse.deserialize(new Uint8Array(bytes))
            }
        };
        [method: string]: grpc_1.UntypedHandleCall;
        abstract Signin(call: grpc_1.ServerUnaryCall<SigninRequest, SigninResponse>, callback: grpc_1.sendUnaryData<SigninResponse>): void;
    }
    export class AuthClient extends grpc_1.makeGenericClientConstructor(UnimplementedAuthService.definition, "Auth", {}) {
        constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
            super(address, credentials, options);
        }
        Signin: GrpcUnaryServiceInterface<SigninRequest, SigninResponse> = (message: SigninRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<SigninResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<SigninResponse>, callback?: grpc_1.requestCallback<SigninResponse>): grpc_1.ClientUnaryCall => {
            return super.Signin(message, metadata, options, callback);
        };
    }
}
